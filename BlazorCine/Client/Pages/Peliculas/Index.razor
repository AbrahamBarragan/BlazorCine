@page "/indice-peliculas"
@inject HttpClient http
@inject NavigationManager navigationManager

<h3>Peliculas</h3>

<div>
	<a class="btn btn-success" href="crear-pelicula">Nueva Pelicula</a>
</div>

@if (peliculas == null)
{
	<text>Cargarndo...</text>
}
else if (peliculas.Count == 0)
{
	<text>No se encontraron peliculas</text>
}
else
{
	<div class="table-responsive">
		<table class="teble text-center table-hover">
			<thead class="teble-striped">
				<tr>
					<th scope="col">Id</th>
					<th scope="col">Name</th>
					<th scope="col">Opciones</th>
				</tr>
			</thead>
			<tbody>
						@foreach (var pelicula in peliculas)
						{
						<tr>
							<td>@pelicula.Id</td>
							<td>@pelicula.Name</td>

							<td>
					            <button class="btn btn-primary" type="button" @onclick=@(() => navigationManager.NavigateTo($"pelicula/{pelicula.Id}"))>Editar</button>
								<button class="btn btn-danger" type="button" @onclick="@(() => Eliminar(pelicula))">Eliminar</button>
						    </td>
						</tr>
						}
			</tbody>
	    </table>
	</div>

}

@code {
	protected List<PeliculaDTO> peliculas;

    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetFromJsonAsync<List<PeliculaDTO>>("/peliculas");
        if (response != null)
        {
            peliculas = response;
        }
    }

    protected async Task Eliminar(PeliculaDTO pelicula)
    {
        await http.DeleteAsync($"/peliculas/{pelicula.Id}");
        peliculas.Remove(pelicula);
    }

}
